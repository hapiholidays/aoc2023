#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
//#include <convert.pi>

#define STRING2FLOAT(str,val) HOST("{ ", val, ".reset(new libpi::Float(((libpi::String*)", str, ".get())->GetValue())); }")

#define $printflts \
  2->1: $list(Float)(2 of 1 pure,2); \
  $end;
global $printflts printflts(1,2);
local service PrintFloatsService(printflts (1 of 2) this) // {{{
( local PrintFloats($list(Float)(2 of 1 pure,2) flts, Bool first, $console(2 of 1,2) c) // {{{
  ( flts[1]<<^pop;
    flts[1]>>
    {^nil:
      c[1]<<^str<<"]"<<^nl<<^end;
     ^cons:
      flts[1]>>head>>tail;
      c[1]<<^str<<if not first then ", " else ""<<^flt<<head;
      PrintFloats(tail,false,c);
    }
  ) // }}}
  this[2]>>flts;
  c=new console(2 of 2);c[1]<<^str<<"[";
  PrintFloats(flts,true,c);
) // }}}
|
#define $strfind \
  2->1: String; \
  2->1: String; \
  1->2: Int; \
  $end;
global $strfind strfind(1 pure,2);
local pure service StrFindService(strfind (1 of 2) this) // {{{
( this[2]>>data;
  this[2]>>pat;
  Int patlen=pat&^length;
  if patlen<=0
  then this[2]<<0;
  else Int datalen=data&^length;
       local pure StrFind(1->2:Int;$end;(1 of 1 pure,2) this, Int pos) // {{{
       ( if datalen+1<=pos+patlen
         then this[2]<<0-1;
         else if (data%pos)/patlen=pat
              then this[2]<<pos;
              else StrFind(this,pos+1);
       ) // }}}
       StrFind(this,0);
) // }}}
|
#define $mincrossres \
  1->2:$list(Float)(2 of 1 pure,2); \
  $end;
#define $mincross \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:$list(Float)(2 of 1 pure,2); \
  2->1:Float; \
  $mincrossres
global $mincross mincross(1 pure,2);
local pure service MinCrossService(mincross (1 of 2) this) // {{{
( this[2]>>xs>>ys>>zs>>dxs>>dys>>dzs>>ts>>f;
  local pure MinCross($mincrossres(1 of 1 pure,2) this, // {{{
                      $list(Float)(2 of 1 pure,2) xs,
                      $list(Float)(2 of 1 pure,2) ys,
                      $list(Float)(2 of 1 pure,2) zs,
                      $list(Float)(2 of 1 pure,2) dxs,
                      $list(Float)(2 of 1 pure,2) dys,
                      $list(Float)(2 of 1 pure,2) dzs,
                      $list(Float)(2 of 1 pure,2) ts,
                      Int pos)
  ( local pure End($list(Float)(2 of 1 pure,2) xs,
                   $list(Float)(2 of 1 pure,2) ys,
                   $list(Float)(2 of 1 pure,2) zs,
                   $list(Float)(2 of 1 pure,2) dxs,
                   $list(Float)(2 of 1 pure,2) dys,
                   $list(Float)(2 of 1 pure,2) dzs)
    ( xs[1]<<^end;
      ys[1]<<^end;
      zs[1]<<^end;
      dxs[1]<<^end;
      dys[1]<<^end;
      dzs[1]<<^end;
    )
    xs[1]<<^get<<pos;
    xs[1]>>
    {^err:
      xs[1]>>err;
      this[2]<<ts;
      End(xs,ys,zs,dxs,dys,dzs);
     ^val:
      xs[1]>>x1;
      xs[1]<<^get<<pos+1;
      xs[1]>>
      {^err:
        xs[1]>>err;
        this[2]<<ts;
        End(xs,ys,zs,dxs,dys,dzs);
       ^val:
        xs[1]>>x2;
        xs[1]<<^get<<pos+2;
        xs[1]>>
        {^err:
          xs[1]>>err;
          this[2]<<ts;
          End(xs,ys,zs,dxs,dys,dzs);
         ^val:
          xs[1]>>x3;
          ys[1]<<^get<<pos;
          ys[1]>>
          {^err:
            ys[1]>>err;
            this[2]<<ts;
            End(xs,ys,zs,dxs,dys,dzs);
           ^val:
            ys[1]>>y1;
            ys[1]<<^get<<pos+1;
            ys[1]>>
            {^err:
              ys[1]>>err;
              this[2]<<ts;
              End(xs,ys,zs,dxs,dys,dzs);
             ^val:
              ys[1]>>y2;
              ys[1]<<^get<<pos+2;
              ys[1]>>
              {^err:
                ys[1]>>err;
                this[2]<<ts;
                End(xs,ys,zs,dxs,dys,dzs);
               ^val:
                ys[1]>>y3;
                zs[1]<<^get<<pos;
                zs[1]>>
                {^err:
                  zs[1]>>err;
                  this[2]<<ts;
                  End(xs,ys,zs,dxs,dys,dzs);
                 ^val:
                  zs[1]>>z1;
                  zs[1]<<^get<<pos+1;
                  zs[1]>>
                  {^err:
                    zs[1]>>err;
                    this[2]<<ts;
                    End(xs,ys,zs,dxs,dys,dzs);
                   ^val:
                    zs[1]>>z2;
                    zs[1]<<^get<<pos+2;
                    zs[1]>>
                    {^err:
                      zs[1]>>err;
                      this[2]<<ts;
                      End(xs,ys,zs,dxs,dys,dzs);
                     ^val:
                      zs[1]>>z3;
                      dxs[1]<<^get<<pos;
                      dxs[1]>>
                      {^err:
                        dxs[1]>>err;
                        this[2]<<ts;
                        End(xs,ys,zs,dxs,dys,dzs);
                       ^val:
                        dxs[1]>>dx1;
                        dxs[1]<<^get<<pos+1;
                        dxs[1]>>
                        {^err:
                          dxs[1]>>err;
                          this[2]<<ts;
                          End(xs,ys,zs,dxs,dys,dzs);
                         ^val:
                          dxs[1]>>dx2;
                          dxs[1]<<^get<<pos+2;
                          dxs[1]>>
                          {^err:
                            dxs[1]>>err;
                            this[2]<<ts;
                            End(xs,ys,zs,dxs,dys,dzs);
                           ^val:
                            dxs[1]>>dx3;
                            dys[1]<<^get<<pos;
                            dys[1]>>
                            {^err:
                              dys[1]>>err;
                              this[2]<<ts;
                              End(xs,ys,zs,dxs,dys,dzs);
                             ^val:
                              dys[1]>>dy1;
                              dys[1]<<^get<<pos+1;
                              dys[1]>>
                              {^err:
                                dys[1]>>err;
                                this[2]<<ts;
                                End(xs,ys,zs,dxs,dys,dzs);
                               ^val:
                                dys[1]>>dy2;
                                dys[1]<<^get<<pos+2;
                                dys[1]>>
                                {^err:
                                  dys[1]>>err;
                                  this[2]<<ts;
                                  End(xs,ys,zs,dxs,dys,dzs);
                                 ^val:
                                  dys[1]>>dy3;
                                  dzs[1]<<^get<<pos;
                                  dzs[1]>>
                                  {^err:
                                    dzs[1]>>err;
                                    this[2]<<ts;
                                    End(xs,ys,zs,dxs,dys,dzs);
                                   ^val:
                                    dzs[1]>>dz1;
                                    dzs[1]<<^get<<pos+1;
                                    dzs[1]>>
                                    {^err:
                                      dzs[1]>>err;
                                      this[2]<<ts;
                                      End(xs,ys,zs,dxs,dys,dzs);
                                     ^val:
                                      dzs[1]>>dz2;
                                      dzs[1]<<^get<<pos+2;
                                      dzs[1]>>
                                      {^err:
                                        dzs[1]>>err;
                                        this[2]<<ts;
                                        End(xs,ys,zs,dxs,dys,dzs);
                                       ^val:
                                        dzs[1]>>dz3;
                                        ts[1]<<^get<<pos;
                                        ts[1]>>
                                        {^err:
                                          ts[1]>>err;
                                          this[2]<<ts;
                                          End(xs,ys,zs,dxs,dys,dzs);
                                         ^val:
                                          ts[1]>>t1;
                                          ts[1]<<^get<<pos+1;
                                          ts[1]>>
                                          {^err:
                                            ts[1]>>err;
                                            this[2]<<ts;
                                            End(xs,ys,zs,dxs,dys,dzs);
                                           ^val:
                                            ts[1]>>t2;
                                            ts[1]<<^get<<pos+2;
                                            ts[1]>>
                                            {^err:
                                              ts[1]>>err;
                                              this[2]<<ts;
                                              End(xs,ys,zs,dxs,dys,dzs);
                                             ^val:
                                              ts[1]>>t3;
                                              // Calculate current positions
                                              Float p1x=x1+t1*dx1;
                                              Float p1y=y1+t1*dy1;
                                              Float p1z=z1+t1*dz1;
                                              Float p2x=x2+t2*dx2;
                                              Float p2y=y2+t2*dy2;
                                              Float p2z=z2+t2*dz2;
                                              Float p3x=x3+t3*dx3;
                                              Float p3y=y3+t3*dy3;
                                              Float p3z=z3+t3*dz3;
                                              // Calculate Positions at deltas (vA=t+f, vB=t-f)
                                              Float vAp1x=x1+(t1+f)*dx1;
                                              Float vAp1y=y1+(t1+f)*dy1;
                                              Float vAp1z=z1+(t1+f)*dz1;
                                              Float vAp2x=x2+(t2+f)*dx2;
                                              Float vAp2y=y2+(t2+f)*dy2;
                                              Float vAp2z=z2+(t2+f)*dz2;
                                              Float vAp3x=x3+(t3+f)*dx3;
                                              Float vAp3y=y3+(t3+f)*dy3;
                                              Float vAp3z=z3+(t3+f)*dz3;
                                              Float vBp1x=x1+(t1-f)*dx1;
                                              Float vBp1y=y1+(t1-f)*dy1;
                                              Float vBp1z=z1+(t1-f)*dz1;
                                              Float vBp2x=x2+(t2-f)*dx2;
                                              Float vBp2y=y2+(t2-f)*dy2;
                                              Float vBp2z=z2+(t2-f)*dz2;
                                              Float vBp3x=x3+(t3-f)*dx3;
                                              Float vBp3y=y3+(t3-f)*dy3;
                                              Float vBp3z=z3+(t3-f)*dz3;

                                              // Update t1
                                              Float vAd12x=p2x-vAp1x;
                                              Float vAd12y=p2y-vAp1y;
                                              Float vAd12z=p2z-vAp1z;
                                              Float vAd13x=p3x-vAp1x;
                                              Float vAd13y=p3y-vAp1y;
                                              Float vAd13z=p3z-vAp1z;
                                              Float vA1cx=vAd12y*vAd13z-vAd12z*vAd13y;
                                              Float vA1cy=vAd12x*vAd13z-vAd12z*vAd13x;
                                              Float vA1cz=vAd12x*vAd13y-vAd12y*vAd13x;
                                              Float vA1len=vA1cx*vA1cx+vA1cy*vA1cy+vA1cz*vA1cz;
                                              Float vBd12x=p2x-vBp1x;
                                              Float vBd12y=p2y-vBp1y;
                                              Float vBd12z=p2z-vBp1z;
                                              Float vBd13x=p3x-vBp1x;
                                              Float vBd13y=p3y-vBp1y;
                                              Float vBd13z=p3z-vBp1z;
                                              Float vB1cx=vBd12y*vBd13z-vBd12z*vBd13y;
                                              Float vB1cy=vBd12x*vBd13z-vBd12z*vBd13x;
                                              Float vB1cz=vBd12x*vBd13y-vBd12y*vBd13x;
                                              Float vB1len=vB1cx*vB1cx+vB1cy*vB1cy+vB1cz*vB1cz;
                                              Float delta1=if (t1-f<=0.0) or (vA1len<=vB1len) then f else 0.0-f;
                                              ts[1]<<^set<<pos<<t1+delta1;

                                              // Update t2
                                              Float vAd21x=p1x-vAp2x;
                                              Float vAd21y=p1y-vAp2y;
                                              Float vAd21z=p1z-vAp2z;
                                              Float vAd23x=p3x-vAp2x;
                                              Float vAd23y=p3y-vAp2y;
                                              Float vAd23z=p3z-vAp2z;
                                              Float vA2cx=vAd21y*vAd23z-vAd21z*vAd23y;
                                              Float vA2cy=vAd21x*vAd23z-vAd21z*vAd23x;
                                              Float vA2cz=vAd21x*vAd23y-vAd21y*vAd23x;
                                              Float vA2len=vA2cx*vA2cx+vA2cy*vA2cy+vA2cz*vA2cz;
                                              Float vBd21x=p1x-vBp2x;
                                              Float vBd21y=p1y-vBp2y;
                                              Float vBd21z=p1z-vBp2z;
                                              Float vBd23x=p3x-vBp2x;
                                              Float vBd23y=p3y-vBp2y;
                                              Float vBd23z=p3z-vBp2z;
                                              Float vB2cx=vBd21y*vBd23z-vBd21z*vBd23y;
                                              Float vB2cy=vBd21x*vBd23z-vBd21z*vBd23x;
                                              Float vB2cz=vBd21x*vBd23y-vBd21y*vBd23x;
                                              Float vB2len=vB2cx*vB2cx+vB2cy*vB2cy+vB2cz*vB2cz;
                                              Float delta2=if (t2-f<=0.0) or (vA2len<=vB2len) then f else 0.0-f;
                                              ts[1]<<^set<<pos+1<<t2+delta2;

                                              // Update t3
                                              Float vAd31x=p1x-vAp3x;
                                              Float vAd31y=p1y-vAp3y;
                                              Float vAd31z=p1z-vAp3z;
                                              Float vAd32x=p2x-vAp3x;
                                              Float vAd32y=p2y-vAp3y;
                                              Float vAd32z=p2z-vAp3z;
                                              Float vA3cx=vAd31y*vAd32z-vAd31z*vAd32y;
                                              Float vA3cy=vAd31x*vAd32z-vAd31z*vAd32x;
                                              Float vA3cz=vAd31x*vAd32y-vAd31y*vAd32x;
                                              Float vA3len=vA3cx*vA3cx+vA3cy*vA3cy+vA3cz*vA3cz;
                                              Float vBd31x=p1x-vBp3x;
                                              Float vBd31y=p1y-vBp3y;
                                              Float vBd31z=p1z-vBp3z;
                                              Float vBd32x=p2x-vBp3x;
                                              Float vBd32y=p2y-vBp3y;
                                              Float vBd32z=p2z-vBp3z;
                                              Float vB3cx=vBd31y*vBd32z-vBd31z*vBd32y;
                                              Float vB3cy=vBd31x*vBd32z-vBd31z*vBd32x;
                                              Float vB3cz=vBd31x*vBd32y-vBd31y*vBd32x;
                                              Float vB3len=vB3cx*vB3cx+vB3cy*vB3cy+vB3cz*vB3cz;
                                              Float delta3=if (t3-f<=0.0) or (vA3len<=vB3len) then f else 0.0-f;
                                              ts[1]<<^set<<pos+2<<t3+delta3;
                                              MinCross(this,xs,ys,zs,dxs,dys,dzs,ts,pos+1);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ) // }}}
  MinCross(this,xs,ys,zs,dxs,dys,dzs,ts,0);
) // }}}
|
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) f, // {{{
             $list(Float)(2 of 1 pure,2) xs,
             $list(Float)(2 of 1 pure,2) ys,
             $list(Float)(2 of 1 pure,2) zs,
             $list(Float)(2 of 1 pure,2) dxs,
             $list(Float)(2 of 1 pure,2) dys,
             $list(Float)(2 of 1 pure,2) dzs,
             $list(Float)(2 of 1 pure,2) ts)
  ( f[1]<<^Line;
    f[1]>>
    {^Some:
      f[1]>>line;
      xs[1]<<^length;
      xs[1]>>points;
      if (5<=points) or (line&^length<=0)
      then Read(f,xs,ys,zs,dxs,dys,dzs,ts);
      else // First value
           fs1=new strfind(2 of 2);
           fs1[1]<<line<<",";
           fs1[1]>>pos1;
           String val1=line/pos1;
           Float fval1=0.0;
           STRING2FLOAT(val1,fval1);
           String line2=line%(pos1+2);
     
           // Second value
           fs2=new strfind(2 of 2);
           fs2[1]<<line2<<",";
           fs2[1]>>pos2;
           String val2=line2/pos2;
           Float fval2=0.0;
           STRING2FLOAT(val2,fval2);
           String line3=line2%(pos2+2);
           
           // Third value
           fs3=new strfind(2 of 2);
           fs3[1]<<line3<<"@";
           fs3[1]>>pos3;
           String val3=line3/pos3;
           Float fval3=0.0;
           STRING2FLOAT(val3,fval3);
           String line4=line3%(pos3+2);
           
           // Fourth value
           fs4=new strfind(2 of 2);
           fs4[1]<<line4<<",";
           fs4[1]>>pos4;
           String val4=line4/pos4;
           Float fval4=0.0;
           STRING2FLOAT(val4,fval4);
           String line5=line4%(pos4+2);
           
           // Fifth value
           fs5=new strfind(2 of 2);
           fs5[1]<<line5<<",";
           fs5[1]>>pos5;
           String val5=line5/pos5;
           Float fval5=0.0;
           STRING2FLOAT(val5,fval5);
           String line6=line5%(pos5+2);

           // Sixth value
           Float fval6=0.0;
           STRING2FLOAT(line6,fval6);

           xs[1]<<^snoc<<fval1;
           ys[1]<<^snoc<<fval2;
           zs[1]<<^snoc<<fval3;
           dxs[1]<<^snoc<<fval4;
           dys[1]<<^snoc<<fval5;
           dzs[1]<<^snoc<<fval6;
           ts[1]<<^snoc<<200000000000000.0;
           Read(f,xs,ys,zs,dxs,dys,dzs,ts);
     ^None:
      local RepeatMinCross($list(Float)(2 of 1 pure,2) xs, // {{{
                           $list(Float)(2 of 1 pure,2) ys,
                           $list(Float)(2 of 1 pure,2) zs,
                           $list(Float)(2 of 1 pure,2) dxs,
                           $list(Float)(2 of 1 pure,2) dys,
                           $list(Float)(2 of 1 pure,2) dzs,
                           $list(Float)(2 of 1 pure,2) ts,
                           Float f)
      ( if f<=0.0001
        then local PrintRes($list(Float)(2 of 1 pure,2) xs, // {{{
                            $list(Float)(2 of 1 pure,2) ys,
                            $list(Float)(2 of 1 pure,2) zs,
                            $list(Float)(2 of 1 pure,2) dxs,
                            $list(Float)(2 of 1 pure,2) dys,
                            $list(Float)(2 of 1 pure,2) dzs,
                            $list(Float)(2 of 1 pure,2) ts,
                            Bool first,
                            Float x1, Float y1, Float z1, Float dx1, Float dy1, Float dz1, Float t1,
                            Float x2, Float y2, Float z2, Float dx2, Float dy2, Float dz2, Float t2)
             ( xs[1]<<^pop;
               xs[1]>>
               {^nil:
                 ys[1]<<^end;
                 zs[1]<<^end;
                 dxs[1]<<^end;
                 dys[1]<<^end;
                 dzs[1]<<^end;
                 ts[1]<<^end;
                 Float dx0=((x1+t1*dx1)-(x2+t2*dx2))/(t1-t2);
                 Float x0=x1+t1*dx1-t1*dx0;
                 Float dy0=((y1+t1*dy1)-(y2+t2*dy2))/(t1-t2);
                 Float y0=y1+t1*dy1-t1*dy0;
                 Float dz0=((z1+t1*dz1)-(z2+t2*dz2))/(t1-t2);
                 Float z0=z1+t1*dz1-t1*dz0;
                 c=new console(2 of 2);
                 c[1]<<^str<<"Interpolated x': "<<^flt<<dx0<<^nl;
                 c[1]<<^str<<"Interpolated x:  "<<^flt<<x0<<^nl;
                 c[1]<<^str<<"Interpolated y': "<<^flt<<dy0<<^nl;
                 c[1]<<^str<<"Interpolated y:  "<<^flt<<y0<<^nl;
                 c[1]<<^str<<"Interpolated z': "<<^flt<<dz0<<^nl;
                 c[1]<<^str<<"Interpolated z:  "<<^flt<<z0<<^nl<<^end;
                ^cons:
                 xs[1]>>x>>xs2;
                 ys[1]<<^pop;
                 ys[1]>>
                 {^nil:
                   xs2[1]<<^end;
                   zs[1]<<^end;
                   dxs[1]<<^end;
                   dys[1]<<^end;
                   dzs[1]<<^end;
                   ts[1]<<^end;
                  ^cons:
                   ys[1]>>y>>ys2;
                   zs[1]<<^pop;
                   zs[1]>>
                   {^nil:
                     xs2[1]<<^end;
                     ys2[1]<<^end;
                     dxs[1]<<^end;
                     dys[1]<<^end;
                     dzs[1]<<^end;
                     ts[1]<<^end;
                    ^cons:
                     zs[1]>>z>>zs2;
                     dxs[1]<<^pop;
                     dxs[1]>>
                     {^nil:
                       xs2[1]<<^end;
                       ys2[1]<<^end;
                       zs2[1]<<^end;
                       dys[1]<<^end;
                       dzs[1]<<^end;
                       ts[1]<<^end;
                      ^cons:
                       dxs[1]>>dx>>dxs2;
                       dys[1]<<^pop;
                       dys[1]>>
                       {^nil:
                         xs2[1]<<^end;
                         ys2[1]<<^end;
                         zs2[1]<<^end;
                         dxs2[1]<<^end;
                         dzs[1]<<^end;
                         ts[1]<<^end;
                        ^cons:
                         dys[1]>>dy>>dys2;
                         dzs[1]<<^pop;
                         dzs[1]>>
                         {^nil:
                           xs2[1]<<^end;
                           ys2[1]<<^end;
                           zs2[1]<<^end;
                           dxs2[1]<<^end;
                           dys2[1]<<^end;
                           ts[1]<<^end;
                          ^cons:
                           dzs[1]>>dz>>dzs2;
                           ts[1]<<^pop;
                           ts[1]>>
                           {^nil:
                             xs2[1]<<^end;
                             ys2[1]<<^end;
                             zs2[1]<<^end;
                             dxs2[1]<<^end;
                             dys2[1]<<^end;
                             dzs2[1]<<^end;
                            ^cons:
                             ts[1]>>t>>ts2;
                             c=new console(2 of 2);
                             c[1]<<^str<<"At time: "<<^flt<<t<<^str<<" at ("
                                 <<^flt<<x+t*dx<<^str<<","
                                 <<^flt<<y+t*dy<<^str<<","
                                 <<^flt<<z+t*dz<<^str<<")"<<^nl<<^end;
                             if (first)
                             then PrintRes(xs2,ys2,zs2,dxs2,dys2,dzs2,ts2,
                                           false,
                                           x,y,z,dx,dy,dz,t,
                                           x2,y2,z2,dx2,dy2,dz2,t2);
                             else PrintRes(xs2,ys2,zs2,dxs2,dys2,dzs2,ts2,
                                           false,
                                           x1,y1,z1,dx1,dy1,dz1,t1,
                                           x,y,z,dx,dy,dz,t);
                           }
                         }
                       }
                     }
                   }
                 }
               }
             ) // }}}
             PrintRes(xs,ys,zs,dxs,dys,dzs,ts,
                      true,
                      0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                      0.0,0.0,0.0,0.0,0.0,0.0,0.0);
        else ts[1]<<^copy;
             ts[1]>>ts0;
             pf=new printflts(2 of 2);
             pf[1]<<ts0;
             xs[1]<<^copy;
             xs[1]>>xs2;
             ys[1]<<^copy;
             ys[1]>>ys2;
             zs[1]<<^copy;
             zs[1]>>zs2;
             dxs[1]<<^copy;
             dxs[1]>>dxs2;
             dys[1]<<^copy;
             dys[1]>>dys2;
             dzs[1]<<^copy;
             dzs[1]>>dzs2;
             mc=new mincross(2 of 2);
             mc[1]<<xs<<ys<<zs<<dxs<<dys<<dzs<<ts<<f;
             mc[1]>>ts2;
             RepeatMinCross(xs2,ys2,zs2,dxs2,dys2,dzs2,ts2,f*0.9);
      ) // }}}
      RepeatMinCross(xs,ys,zs,dxs,dys,dzs,ts,200000000000000.0);
    }
  ) // }}}
  xs=new list(2 of 2);
  xs<<Float;
  ys=new list(2 of 2);
  ys<<Float;
  zs=new list(2 of 2);
  zs<<Float;
  dxs=new list(2 of 2);
  dxs<<Float;
  dys=new list(2 of 2);
  dys<<Float;
  dzs=new list(2 of 2);
  dzs<<Float;
  ts=new list(2 of 2);
  ts<<Float;
  Read(f,xs,ys,zs,dxs,dys,dzs,ts);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
