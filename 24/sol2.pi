#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>

#define $printflts \
  2->1: $list(Float)(2 of 1 pure,2); \
  $end;
global $printflts printflts(1,2);
local service PrintIntsService(printints (1 of 2) this) // {{{
( this[2]>>flts;
  c=new console(2 of 2);c[1]<<^str<<"[";
  local PrinFlts($list(Int)(2 of 1 pure,2) flts, Bool first, $console(2 of 1,2) c) // {{{
  ( ints[1]<<^pop;
    ints[1]>>
    {^nil:
      c[1]<<^str<<"]"<<^nl<<^end;
     ^cons:
      ints[1]>>head>>tail;
      c[1]<<^str<<if not first then ", " else ""<<^flt<<head;
      PrintFlts(tail,false,c);
    }
  ) // }}}
  PrintInts(ints,true,c);
) // }}}
|
#define $strfind \
  2->1: String; \
  2->1: String; \
  1->2: Int; \
  $end;
global $strfind strfind(1 pure,2);
local pure service StrFindService(strfind (1 of 2) this) // {{{
( this[2]>>data;
  this[2]>>pat;
  Int patlen=pat&^length;
  if patlen<=0
  then this[2]<<0;
  else Int datalen=data&^length;
       local pure StrFind(1->2:Int;$end;(1 of 1 pure,2) this, Int pos) // {{{
       ( if datalen+1<=pos+patlen
         then this[2]<<0-1;
         else if (data%pos)/patlen=pat
              then this[2]<<pos;
              else StrFind(this,pos+1);
       ) // }}}
       StrFind(this,0);
) // }}}
|
#define $printnres \
  1->2:$console(2 of 1,2); \
  $end;
#define $printn \
  2->1:$console(2 of 1,2); \
  2->1:Int; \
  $printnres
global $printn printn(1,2);
local service PrintNService(printn (1 of 2) this) // {{{
( local PrintN($printnres(1 of 1,2) this, $console(2 of 1,2) c, Int n) // {{{
  ( if n<=0
    then this[2]<<c;
    else c[1]<<^str<<"0,";
         PrintN(this,c,n-1);
  ) // }}}
  this[2]>>c>>n;
  PrintN(this,c,n);
) // }}}
|
#define $mincrossres \
  1->2:$list(Float)(2 of 1 pure,2); \
  $end;
#define $mincross \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:$list(Int)(2 of 1 pure,2); \
  $mincrossres
global $mincross mincross(1 pure,2);
local pure service MinCrossService(mincross (1 of 2) this) // {{{
( this[2]>>xs>>ys>>zs>>dxs>>dys>>dzs;
  ts=new list(2 of 2);
  ts<<Float;
  local pure MinCross($mincrossres(1 of 1 pure,2) this, // {{{
                      $list(Int)(2 of 1 pure,2) xs,
                      $list(Int)(2 of 1 pure,2) ys,
                      $list(Int)(2 of 1 pure,2) zs,
                      $list(Int)(2 of 1 pure,2) dxs,
                      $list(Int)(2 of 1 pure,2) dys,
                      $list(Int)(2 of 1 pure,2) dzs,
                      $list(Float)(2 of 1 pure,2) ts,
                      Int pos)
  ( xs[1]<<^get<<pos;
    xs[1]>>
    {^err:
      xs[1]>>err;
      xs[1]<<^end;
      ys[1]<<^end;
      zs[1]<<^end;
      dxs[1]<<^end;
      dys[1]<<^end;
      dzs[1]<<^end;
      pf=new printflts(2 of 2);
      pf[1]<<ts;
     ^val:
      xs[1]>>x1;
      xs[1]<<^get<<pos+1;
      xs[1]>>
      {^err:
        xs[1]>>err;
        xs[1]<<^end;
        ys[1]<<^end;
        zs[1]<<^end;
        dxs[1]<<^end;
        dys[1]<<^end;
        dzs[1]<<^end;
        pf=new printflts(2 of 2);
        pf[1]<<ts;
       ^val:
        xs[1]>>x2;
        xs[1]<<^get<<^pos+2;
        xs[1]>>
        {^err:
          xs[1]>>err;
          xs[1]<<^end;
          ys[1]<<^end;
          zs[1]<<^end;
          dxs[1]<<^end;
          dys[1]<<^end;
          dzs[1]<<^end;
          pf=new printflts(2 of 2);
          pf[1]<<ts;
         ^val:
          xs[1]>>x3;
          ts[1]<<^get<<pos;
          ts[1]>>
          {^err:
            ts[1]>>err;
            xs[1]<<^end;
            ys[1]<<^end;
            zs[1]<<^end;
            dxs[1]<<^end;
            dys[1]<<^end;
            dzs[1]<<^end;
            pf=new printflts(2 of 2);
            pf[1]<<ts;
           ^val:
            ts[1]>>t1;
            ts[1]<<^get<<pos+1;


          
    xs[1]>>
    {^nil:
      
  ) // }}}
  MinCross(this,xs,ys,zs,dxs,dys,dzs,ts,1);
) // }}}
|
local MinimizeCross($list(Int)(2 of 1 pure,2) xs, // {{{
                    $list(Int)(2 of 1 pure,2) ys,
                    $list(Int)(2 of 1 pure,2) zs,
                    $list(Int)(2 of 1 pure,2) dxs,
                    $list(Int)(2 of 1 pure,2) dys,
                    $list(Int)(2 of 1 pure,2) dzs,
                    $list(Int)(2 of 1 pure,2) tzs,
                    Int eqns)
( local PrintEquations2(Int x, Int y, Int z, // {{{
                        Int dx, Int dy, Int dz,
                        $list(Int)(2 of 1 pure,2) xs,
                        $list(Int)(2 of 1 pure,2) ys,
                        $list(Int)(2 of 1 pure,2) zs,
                        $list(Int)(2 of 1 pure,2) dxs,
                        $list(Int)(2 of 1 pure,2) dys,
                        $list(Int)(2 of 1 pure,2) dzs,
                        Int j)
 ( // POP
   xs[1]<<^pop;
   xs[1]>>
   {^nil:
     ys[1]<<^end;
     zs[1]<<^end;
     dxs[1]<<^end;
     dys[1]<<^end;
     dzs[1]<<^end;
    ^cons:
     xs[1]>>x2>>rxs;
     ys[1]<<^pop;
     ys[1]>>
     {^nil:
       rxs[1]<<^end;
       zs[1]<<^end;
       dxs[1]<<^end;
       dys[1]<<^end;
       dzs[1]<<^end;
      ^cons:
       ys[1]>>y2>>rys;
       zs[1]<<^pop;
       zs[1]>>
       {^nil:
         rxs[1]<<^end;
         rys[1]<<^end;
         dxs[1]<<^end;
         dys[1]<<^end;
         dzs[1]<<^end;
        ^cons:
         zs[1]>>z2>>rzs;
         dxs[1]<<^pop;
         dxs[1]>>
         {^nil:
           rxs[1]<<^end;
           rys[1]<<^end;
           rzs[1]<<^end;
           dys[1]<<^end;
           dzs[1]<<^end;
          ^cons:
           dxs[1]>>dx2>>rdxs;
           dys[1]<<^pop;
           dys[1]>>
           {^nil:
             rxs[1]<<^end;
             rys[1]<<^end;
             rzs[1]<<^end;
             rdxs[1]<<^end;
             dzs[1]<<^end;
            ^cons:
             dys[1]>>dy2>>rdys;
             dzs[1]<<^pop;
             dzs[1]>>
             {^nil:
               rxs[1]<<^end;
               rys[1]<<^end;
               rzs[1]<<^end;
               rdxs[1]<<^end;
               rdys[1]<<^end;
              ^cons:
               dzs[1]>>dz2>>rdzs;
               // PRINT matrix row
               // columns are t1,t2,...,tn,t1dx0,t2dx0,...,tndx0,t1dy0,t2dy0,...,tndy0,t1dz0,t2dz0,...,tndz0,const
               // Since (x0,y0,z0)+ti(dx0,dy0,dz0)=(xi,yi,zi)+ti(dxi,dyi,dzi) and same for j
               // we have (x0,y0,z0)=(xi,yi,zi)+ti(dxi-dx0,dyi-dy0,dzi-dz0) and same for j, and thus
               // ti*dxi-tj*dxj-ti*dx0+tj*dx0=xj-xi
               c=new console(2 of 2);
               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^int<<dx<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^int<<0-dx2<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^str<<"-1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^str<<"1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<2*eqns;
               pn[1]>>c;
               c[1]<<^str<<""<<^int<<x2-x<<^str<<";"<<^nl;

               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^int<<dy<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^int<<0-dy2<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^str<<"-1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^str<<"1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns;
               pn[1]>>c;
               c[1]<<^str<<"int64("<<^int<<y2-y<<^str<<");"<<^nl;

               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^int<<dz<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^int<<0-dz2<<^str<<",";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<2*eqns;
               pn[1]>>c;
               pn=new printn(2 of 2);
               pn[1]<<c<<i-1;
               pn[1]>>c;
               c[1]<<^str<<"-1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<j-i-1;
               pn[1]>>c;
               c[1]<<^str<<"1,";
               pn=new printn(2 of 2);
               pn[1]<<c<<eqns-j;
               pn[1]>>c;
               c[1]<<^str<<"int64("<<^int<<z2-z<<^str<<");"<<^nl<<^end;

               // CALL RECURSICELY
               PrintEquations2(x,y,z,dx,dy,dz,rxs,rys,rzs,rdxs,rdys,rdzs,j+1);
             }
           }
         }
       }
     }
   }
 ) // }}}
 xs[1]<<^pop;
 xs[1]>>
 {^nil:
   ys[1]<<^end;
   zs[1]<<^end;
   dxs[1]<<^end;
   dys[1]<<^end;
   dzs[1]<<^end;
  ^cons:
   xs[1]>>x>>rxs;
   ys[1]<<^pop;
   ys[1]>>
   {^nil:
     rxs[1]<<^end;
     zs[1]<<^end;
     dxs[1]<<^end;
     dys[1]<<^end;
     dzs[1]<<^end;
    ^cons:
     ys[1]>>y>>rys;
     zs[1]<<^pop;
     zs[1]>>
     {^nil:
       rxs[1]<<^end;
       rys[1]<<^end;
       dxs[1]<<^end;
       dys[1]<<^end;
       dzs[1]<<^end;
      ^cons:
       zs[1]>>z>>rzs;
       dxs[1]<<^pop;
       dxs[1]>>
       {^nil:
         rxs[1]<<^end;
         rys[1]<<^end;
         rzs[1]<<^end;
         dys[1]<<^end;
         dzs[1]<<^end;
        ^cons:
         dxs[1]>>dx>>rdxs;
         dys[1]<<^pop;
         dys[1]>>
         {^nil:
           rxs[1]<<^end;
           rys[1]<<^end;
           rzs[1]<<^end;
           rdxs[1]<<^end;
           dzs[1]<<^end;
          ^cons:
           dys[1]>>dy>>rdys;
           dzs[1]<<^pop;
           dzs[1]>>
           {^nil:
             rxs[1]<<^end;
             rys[1]<<^end;
             rzs[1]<<^end;
             rdxs[1]<<^end;
             rdys[1]<<^end;
            ^cons:
             dzs[1]>>dz>>rdzs;
             rxs[1]<<^copy;
             rxs[1]>>rxscpy;
             rys[1]<<^copy;
             rys[1]>>ryscpy;
             rzs[1]<<^copy;
             rzs[1]>>rzscpy;
             rdxs[1]<<^copy;
             rdxs[1]>>rdxscpy;
             rdys[1]<<^copy;
             rdys[1]>>rdyscpy;
             rdzs[1]<<^copy;
             rdzs[1]>>rdzscpy;
             ( PrintEquations(rxs,rys,rzs,rdxs,rdys,rdzs,i+1,eqns);
             | PrintEquations2(x,y,z,dx,dy,dz,rxscpy,ryscpy,rzscpy,rdxscpy,rdyscpy,rdzscpy,i+1);
             )
           }
         }
       }
     }
   }
 }
) // }}}
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) f, // {{{
             $list(Int)(2 of 1 pure,2) xs,
             $list(Int)(2 of 1 pure,2) ys,
             $list(Int)(2 of 1 pure,2) zs,
             $list(Int)(2 of 1 pure,2) dxs,
             $list(Int)(2 of 1 pure,2) dys,
             $list(Int)(2 of 1 pure,2) dzs)
  ( f[1]<<^Line;
    f[1]>>
    {^Some:
      f[1]>>line;
      xs[1]<<^length;
      xs[1]>>points;
      if (20<=points) or (line&^length<=0)
      then Read(f,xs,ys,zs,dxs,dys,dzs);
      else // First value
           fs1=new strfind(2 of 2);
           fs1[1]<<line<<",";
           fs1[1]>>pos1;
           String val1=line/pos1;
           Int fval1=0;
           STRING2INT(val1,fval1);
           String line2=line%(pos1+2);
     
           // Second value
           fs2=new strfind(2 of 2);
           fs2[1]<<line2<<",";
           fs2[1]>>pos2;
           String val2=line2/pos2;
           Int fval2=0;
           STRING2INT(val2,fval2);
           String line3=line2%(pos2+2);
           
           // Third value
           fs3=new strfind(2 of 2);
           fs3[1]<<line3<<"@";
           fs3[1]>>pos3;
           String val3=line3/pos3;
           Int fval3=0;
           STRING2INT(val3,fval3);
           String line4=line3%(pos3+2);
           
           // Fourth value
           fs4=new strfind(2 of 2);
           fs4[1]<<line4<<",";
           fs4[1]>>pos4;
           String val4=line4/pos4;
           Int fval4=0;
           STRING2INT(val4,fval4);
           String line5=line4%(pos4+2);
           
           // Fifth value
           fs5=new strfind(2 of 2);
           fs5[1]<<line5<<",";
           fs5[1]>>pos5;
           String val5=line5/pos5;
           Int fval5=0;
           STRING2INT(val5,fval5);
           String line6=line5%(pos5+2);

           // Sixth value
           Int fval6=0;
           STRING2INT(line6,fval6);

           // Test val 2
           //c=new console(2 of 2);
           //c[1]<<^str<<val1<<^str<<"->"<<^int<<fval1<<^nl
           //    <<^str<<val2<<^str<<"->"<<^int<<fval2<<^nl
           //    <<^str<<val3<<^str<<"->"<<^int<<fval3<<^nl
           //    <<^str<<val4<<^str<<"->"<<^int<<fval4<<^nl
           //    <<^str<<val5<<^str<<"->"<<^int<<fval5<<^nl
           //    <<^str<<line6<<^str<<"->"<<^int<<fval6<<^nl
           //    <<^end;

           xs[1]<<^snoc<<fval1;
           ys[1]<<^snoc<<fval2;
           zs[1]<<^snoc<<fval3;
           dxs[1]<<^snoc<<fval4;
           dys[1]<<^snoc<<fval5;
           dzs[1]<<^snoc<<fval6;
           Read(f,xs,ys,zs,dxs,dys,dzs);
     ^None:
      xs[1]<<^length;
      xs[1]>>eqns;
      PrintEquations(xs,ys,zs,dxs,dys,dzs,1,eqns);
    }
  ) // }}}
  xs=new list(2 of 2);
  xs<<Int;
  ys=new list(2 of 2);
  ys<<Int;
  zs=new list(2 of 2);
  zs<<Int;
  dxs=new list(2 of 2);
  dxs<<Int;
  dys=new list(2 of 2);
  dys<<Int;
  dzs=new list(2 of 2);
  dzs<<Int;
  Read(f,xs,ys,zs,dxs,dys,dzs);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
