#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>

#define $strfind \
  2->1: String; \
  2->1: String; \
  1->2: Int; \
  $end;
global $strfind strfind(1 pure,2);
local pure service StrFindService(strfind (1 of 2) this) // {{{
( this[2]>>data;
  this[2]>>pat;
  Int patlen=pat&^length;
  if patlen<=0
  then this[2]<<0;
  else Int datalen=data&^length;
       local pure StrFind(1->2:Int;$end;(1 of 1 pure,2) this, Int pos) // {{{
       ( if datalen+1<=pos+patlen
         then this[2]<<0-1;
         else if (data%pos)/patlen=pat
              then this[2]<<pos;
              else StrFind(this,pos+1);
       ) // }}}
       StrFind(this,0);
) // }}}
|
local FindIntersections($list(Float)(2 of 1 pure,2) xs,
                        $list(Float)(2 of 1 pure,2) ys,
                        $list(Float)(2 of 1 pure,2) dxs,
                        $list(Float)(2 of 1 pure,2) dys,
                        Int h1, Int h2, Int hits)
( local End($list(Float)(2 of 1 pure,2) xs,
            $list(Float)(2 of 1 pure,2) ys,
            $list(Float)(2 of 1 pure,2) dxs,
            $list(Float)(2 of 1 pure,2) dys)
  ( xs[1]<<^end;
    ys[1]<<^end;
    dxs[1]<<^end;
    dys[1]<<^end;
    c=new console(2 of 2);
    c[1]<<^str<<"Number of good intersections: " <<^int<<hits<<^nl<<^end;
  )
  // Get data for hail 1
  xs[1]<<^get<<h1;
  xs[1]>>
  {^err:
    xs[1]>>err;
    End(xs,ys,dxs,dys);
   ^val:
    xs[1]>>x1;
    ys[1]<<^get<<h1;
    ys[1]>>
    {^err:
      ys[1]>>err;
      End(xs,ys,dxs,dys);
     ^val:
      ys[1]>>y1;
      dxs[1]<<^get<<h1;
      dxs[1]>>
      {^err:
        dxs[1]>>err;
        End(xs,ys,dxs,dys);
       ^val:
        dxs[1]>>dx1;
        dys[1]<<^get<<h1;
        dys[1]>>
        {^err:
          dys[1]>>err;
          End(xs,ys,dxs,dys);
          // Get data for hail 2
         ^val:
          dys[1]>>dy1;
          xs[1]<<^get<<h2;
          xs[1]>>
          {^err:
            xs[1]>>err;
            FindIntersections(xs,ys,dxs,dys,h1+1,h1+2,hits);
           ^val:
            xs[1]>>x2;
            ys[1]<<^get<<h2;
            ys[1]>>
            {^err:
              ys[1]>>err;
              FindIntersections(xs,ys,dxs,dys,h1+1,h1+2,hits);
             ^val:
              ys[1]>>y2;
              dxs[1]<<^get<<h2;
              dxs[1]>>
              {^err:
                dxs[1]>>err;
                FindIntersections(xs,ys,dxs,dys,h1+1,h1+2,hits);
               ^val:
                dxs[1]>>dx2;
                dys[1]<<^get<<h2;
                dys[1]>>
                {^err:
                  dys[1]>>err;
                  FindIntersections(xs,ys,dxs,dys,h1+1,h1+2,hits);
                 ^val:
                  dys[1]>>dy2;
                  // Calculate intersection point
                  c=new console(2 of 2);
                  c[1]<<^str<<"A: "<<^flt<<x1<<^str<<" "<<^flt<<y1<<^str<<" "<<^flt<<dx1<<^str<<" "<<^flt<<dy1<<^nl;
                  c[1]<<^str<<"B: "<<^flt<<x2<<^str<<" "<<^flt<<y2<<^str<<" "<<^flt<<dx2<<^str<<" "<<^flt<<dy2<<^nl;
                  if (dy1/dx1)=(dy2/dx2)
                  then if y2=(y1+(x2-x1)*(dy1/dx1))
                       then c[1]<<^str<<"Intersects everywhere!"<<^nl<<^end;
                            FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits+1);
                       else c[1]<<^str<<"Does not intersect!"<<^nl<<^end;
                            FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits);
                  else Float t11=(x1-x2)-dx2*(y1-y2)/dy2;
                       Float t12=(dy1*dx2/dy2)-dx1;
                       Float t1=t11/t12;
                       Float t21=(x2-x1)-dx1*(y2-y1)/dy1;
                       Float t22=(dy2*dx1/dy1)-dx2;
                       Float t2=t21/t22;
                       if not (0.0<=t1)
                       then c[1]<<^str<<"Intersection in the past of A"<<^nl<<^end;
                            FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits);
                       else if not (0.0<=t2)
                       then c[1]<<^str<<"Intersection in the past of B"<<^nl<<^end;
                            FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits);
                       else Float ix=x1+dx1*t1;
                            Float iy=y1+dy1*t1;
                            c[1]<<^str<<"Intersection at: X="<<^flt<<ix<<^nl<<^end;
                            if (200000000000000.0<=ix) and (ix<=400000000000000.0) and
                               (200000000000000.0<=iy) and (iy<=400000000000000.0)
                            then FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits+1);
                            else FindIntersections(xs,ys,dxs,dys,h1,h2+1,hits);
                }
              }
            }
          }
        }
      }
    }
  }
)
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) f, // {{{
             $list(Float)(2 of 1 pure,2) xs,
             $list(Float)(2 of 1 pure,2) ys,
             $list(Float)(2 of 1 pure,2) dxs,
             $list(Float)(2 of 1 pure,2) dys)
  ( f[1]<<^Line;
    f[1]>>
    {^Some:
      f[1]>>line;
      if line&^length<=0
      then Read(f,xs,ys,dxs,dys);
      else // First value
           fs1=new strfind(2 of 2);
           fs1[1]<<line<<",";
           fs1[1]>>pos1;
           String val1=line/pos1;
           Float fval1=0.0;
           STRING2FLOAT(val1,fval1);
           String line2=line%(pos1+2);
     
           // Second value
           fs2=new strfind(2 of 2);
           fs2[1]<<line2<<",";
           fs2[1]>>pos2;
           String val2=line2/pos2;
           Float fval2=0.0;
           STRING2FLOAT(val2,fval2);
           String line3=line2%(pos2+2);
           
           // Third value
           fs3=new strfind(2 of 2);
           fs3[1]<<line3<<"@";
           fs3[1]>>pos3;
           String val3=line3/pos3;
           Float fval3=0.0;
           STRING2FLOAT(val3,fval3);
           String line4=line3%(pos3+2);
           
           // Fourth value
           fs4=new strfind(2 of 2);
           fs4[1]<<line4<<",";
           fs4[1]>>pos4;
           String val4=line4/pos4;
           Float fval4=0.0;
           STRING2FLOAT(val4,fval4);
           String line5=line4%(pos4+2);
           
           // Fifth value
           fs5=new strfind(2 of 2);
           fs5[1]<<line5<<",";
           fs5[1]>>pos5;
           String val5=line5/pos5;
           Float fval5=0.0;
           STRING2FLOAT(val5,fval5);
           String line6=line5%(pos5+2);

           // Sixth value
           Float fval6=0.0;
           STRING2FLOAT(line6,fval6);

           // Test val 2
           c=new console(2 of 2);
           c[1]<<^str<<val1<<^str<<"->"<<^flt<<fval1<<^nl
               <<^str<<val2<<^str<<"->"<<^flt<<fval2<<^nl
               <<^str<<val3<<^str<<"->"<<^flt<<fval3<<^nl
               <<^str<<val4<<^str<<"->"<<^flt<<fval4<<^nl
               <<^str<<val5<<^str<<"->"<<^flt<<fval5<<^nl
               <<^str<<line6<<^str<<"->"<<^flt<<fval6<<^nl
               <<^end;

           xs[1]<<^snoc<<fval1;
           ys[1]<<^snoc<<fval2;
           dxs[1]<<^snoc<<fval4;
           dys[1]<<^snoc<<fval5;
           Read(f,xs,ys,dxs,dys);
     ^None:
      FindIntersections(xs,ys,dxs,dys,0,1,0);
    }
  ) // }}}
  xs=new list(2 of 2);
  xs<<Float;
  ys=new list(2 of 2);
  ys<<Float;
  dxs=new list(2 of 2);
  dxs<<Float;
  dys=new list(2 of 2);
  dys<<Float;
  Read(f,xs,ys,dxs,dys);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
