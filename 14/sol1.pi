#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#define $printstrings \
  2->1: $list(String)(2 of 1 pure,2); \
  $end;
global $printstrings printstrings(1,2);
local service PrintStringsService(printstrings (1 of 2) this) // {{{
( local PrintStrings($console(2 of 1,2) c, $list(String)(2 of 1 pure,2) strings, Bool first)
  ( strings[1]<<^pop;
    strings[1]>>
    {^nil:
      c[1]<<^str<<if first then "[]" else "]"<<^nl<<^end;
     ^cons:
      strings[1]>>s>>tail;
      c[1]<<^str<<if first then "[ " else ", "<<^str<<s<<^nl;
      PrintStrings(c,tail,false);
    }
  )
  this[2]>>strings;
  c=new console(2 of 2);
  PrintStrings(c,strings,true);
) // }}}
|
#define $rollrocksres \
  1->2: $list(String)(2 of 1 pure,2); \
  $end;
#define $rollrocks \
  2->1: $list(String)(2 of 1 pure,2); \
  $rollrocksres
global $rollrocks rollrocks(1 ,2);
local service RollRocksService(rollrocks (1 of 2) this) // {{{
( this[2]>>rocks;
  rocks[1]<<^length;
  rocks[1]>>height;
  local RollRocks($rollrocksres(1 of 1 ,2) this, // {{{
                       $list(String)(2 of 1 pure,2) rocks,
                       Int row)
  ( if row+1<=0
    then this[2]<<rocks;
    else rocks[1]<<^get<<row;
         rocks[1]>>
         {^err:
           rocks[1]>>err;
           HOST("cout << \"Error 1\" << endl;") pure;
           this[2]<<rocks;
          ^val:
           local RollRocksRow($rollrocksres(1 of 1 ,2) this, // {{{
                              $list(String)(2 of 1 pure,2) rocks,
                              Int x, String rowstr, Int width)
           ( if width<=x
             then RollRocks(this,rocks,row-1);
             else String rock=(rowstr%x)/1;
                  if rock="O"
                  then // Attempt to roll rock
                       local RollRock($rollrocksres(1 of 1 ,2) this, // {{{
                                      $list(String)(2 of 1 pure,2) rocks,
                                      Int nextrow)
                       ( rocks[1]<<^get<<nextrow;
                         rocks[1]>>
                         {^val:
                           rocks[1]>>nextrowstr;
                           dest=(nextrowstr%x)/1;
                           if (dest="O") or (dest="#")
                           then // Occupied
                                Int destrow=nextrow-1;
                                if destrow<=row then RollRocksRow(this,rocks,x+1,rowstr,width); else
                                rocks[1]<<^get<<destrow;
                                rocks[1]>>
                                {^err:
                                  rocks[1]>>err;
                                  HOST("cout << \"Error 3\" << endl;") pure;
                                  this[2]<<rocks;
                                 ^val:
                                  rocks[1]>>destrowstr;
                                  String updrowstr=(rowstr/x)+"."+(rowstr%(x+1));
                                  String upddestrowstr=(destrowstr/x)+"O"+(destrowstr%(x+1));
                                  rocks[1]<<^set<<row<<updrowstr;
                                  rocks[1]<<^set<<destrow<<upddestrowstr;
                                  RollRocksRow(this,rocks,x+1,updrowstr,width);
                                }
                           else RollRock(this,rocks,nextrow+1);
                          ^err:
                           rocks[1]>>err;
                           // End of map
                           Int destrow=nextrow-1;
                           if destrow<=row then RollRocksRow(this,rocks,x+1,rowstr,width); else
                           rocks[1]<<^get<<destrow;
                           rocks[1]>>
                           {^err:
                             rocks[1]>>err;
                             HOST("cout << \"Error 4\" << endl;") pure;
                             this[2]<<rocks;
                            ^val:
                             rocks[1]>>destrowstr;
                             String updrowstr=(rowstr/x)+"."+(rowstr%(x+1));
                             String upddestrowstr=(destrowstr/x)+"O"+(destrowstr%(x+1));
                             rocks[1]<<^set<<row<<updrowstr;
                             rocks[1]<<^set<<destrow<<upddestrowstr;
                             RollRocksRow(this,rocks,x+1,updrowstr,width);
                           }
                         }
                       ) // }}}
                       RollRock(this,rocks,row+1);
                  else RollRocksRow(this,rocks,x+1,rowstr,width);
           ) // }}}
           rocks[1]>>rowstr;
           Int width=rowstr&^length;
           RollRocksRow(this,rocks,0,rowstr,width);
         }
  ) // }}}
  RollRocks(this,rocks,height-1);
) // }}}
|
#define $sumweightsres \
  1->2: Int; \
  $end;
#define $sumweights \
  2->1: $list(String)(2 of 1 pure,2); \
  $sumweightsres
global $sumweights sumweights(1 ,2);
local service SumWeightsService(sumweights (1 of 2) this) // {{{
( this[2]>>rocks;
  rocks[1]<<^length;
  rocks[1]>>height;
  local SumWeights($sumweightsres(1 of 1 ,2) this, // {{{
                   $list(String)(2 of 1 pure,2) rocks,
                   Int row, Int sum)
  ( if height<=row
    then this[2]<<sum;
         rocks[1]<<^end;
    else rocks[1]<<^get<<row;
         rocks[1]>>
         {^err:
           rocks[1]>>err;
           rocks[1]<<^end;
           HOST("cout << \"Error 10\" << endl;") pure;
           this[2]<<sum;
          ^val:
           rocks[1]>>rowstr;
           Int width=rowstr&^length;
           local SumWeightsRow($sumweightsres(1 of 1 ,2) this, // {{{
                               $list(String)(2 of 1 pure,2) rocks,
                               Int x, Int sum)
           ( if width<=x
             then SumWeights(this,rocks,row+1,sum);
             else String rock=(rowstr%x)/1;
                  if rock="O"
                  then SumWeightsRow(this,rocks,x+1,sum+row+1);
                  else SumWeightsRow(this,rocks,x+1,sum);
           ) // }}}
           SumWeightsRow(this,rocks,0,sum);
         }
  ) // }}}
  SumWeights(this,rocks,0,0);
) // }}}
|
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) f, $list(String)(2 of 1 pure,2) rocks) // {{{
  ( f[1]<<^Line;
    f[1]>>
    {^Some:
      f[1]>>row;
      if 1<=row&^length
      then rocks[1]<<^cons<<row; // Vertically flip map sow weight=rownr
           Read(f,rocks);
      else Read(f,rocks);
     ^None:
      rr=new rollrocks(2 of 2);
      rr[1]<<rocks;
      rr[1]>>rocks;
      sw=new sumweights(2 of 2);
      sw[1]<<rocks;
      sw[1]>>sum;
      c=new console(2 of 2);
      c[1]<<^str<<"Total weight is "<<^int<<sum<<^nl<<^end;
    }
  ) // }}}
  rocks=new list(2 of 2);
  rocks<<String;
  Read(f,rocks);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
