#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>

#define $findnumbersres \
  rec $res; \
  1->2 \
  {^number: \
    1->2: Int; \
    1->2: Int; \
    $res; \
   ^end: \
    $end; \
  }
#define $findnumbers \
  2->1: String; \
  $findnumbersres
global $findnumbers findnumbers(1 pure,2);
local pure service FindNumbersService(findnumbers (1 of 2) s) // {{{
( s[2]>>data;
  Int len=data&^length;
  local pure FindNumbers($findnumbersres(1 of 1 pure,2) s, Int start, Int pos) // {{{
  ( if len<=pos
    then if start+1<=pos
         then s[2]<<^number<<start<<pos-start<<^end;
         else s[2]<<^end;
    else Int ch=data&pos;
         if (ch<=48) and (57<=ch)
         then FindNumbers(s,pos+1,start);
         else if start+1<=pos
              then s[2]<<^number<<start<<pos-start;
                   FindNumbers(s,pos+1,pos+1);
              else FindNumbers(s,pos+1,pos+1);
  ) // }}}
  FindNumbers(s,0,0);
) // }}}
|
#define $findstarslistres \
  1->2: $list(Int)(2 of 1 pure,2); \
  1->2: $list(Int)(2 of 1 pure,2); \
  $end;
#define $findstarslist \
  2->1: $list(String)(2 of 1 pure,2); \
  $findstarslistres
global $findstarslist findstarslist(1 pure,2);
local pure service FindStarsList(findstarslist (1 of 2) s) // {{{
( local pure FindStars($findstarslistres(1 of 1 pure,2) this, // {{{
                       $list(String)(2 of 1 pure,2) data,
                       $list(Int)(2 of 1 pure,2) xs,
                       $list(Int)(2 of 1 pure,2) ys,
                       Int y)
  ( data[1]<<^pop;
    data[1]>>
    {^cons:
      data[1]>>line;
      data[1]>>dtail;
      Int len=line&^length;
      local pure FindStarsLine($findstarslistres(1 of 1 pure,2) this, // {{{
                               $list(String)(2 of 1 pure,2) data,
                               $list(Int)(2 of 1 pure,2) xs,
                               $list(Int)(2 of 1 pure,2) ys,
                               Int x)
      ( if len<=x
        then FindStars(this,data,xs,ys,y+1);
        else String cur=(line%x)/1;
             if cur="*"
             then xs[1]<<^snoc<<x;
                  ys[1]<<^snoc<<y;
                  FindStarsLine(this,data,xs,ys,x+1);
             else FindStarsLine(this,data,xs,ys,x+1);
      ) // }}}
      FindStarsLine(this,dtail,xs,ys,0);
     ^nil:
      this[2]<<xs<<ys;
    }
  ) // }}}
  s[2]>>data;
  xs=new list(2 of 2);
  xs<<Int;
  ys=new list(2 of 2);
  ys<<Int;
  FindStars(s,data,xs,ys,0);
) // }}}
|
#define $findnumberres \
  1->2 \
  {^yes: \
    1->2: Int; \
    $end; \
   ^no: \
    $end; \
  }
#define $findnumber \
  2->1: String; \
  2->1: Int; \
  $findnumberres
global $findnumber findnumber(1 pure,2);
local pure service FindNumberService(findnumber (1 of 2) this) // {{{
( this[2]>>line>>x;
  Int len=line&^length;
  local pure FindNumber($findnumberres(1 of 1 pure,2) this, Int start) // {{{
  ( local pure FindNumberEnd($findnumberres(1 of 1 pure,2) this, Int end) // {{{
    ( local pure ReturnNumber($findnumberres(1 of 1 pure,2) this) // {{{
      ( String numberstr=(line%start)/(end-start);
        Int number=0;
        STRING2INT(numberstr,number) pure;
        this[2]<<^yes<<number;
      ) // }}}
      if len<=end+1
      then ReturnNumber(this);
      else Int i=end+1;
           String ch=(line%i)/1;
           if ("0"<=ch) and (ch<="9")
           then FindNumberEnd(this,i);
           else ReturnNumber(this);
    ) // }}}
    if start<=0
    then FindNumberEnd(this,x);
    else Int i=start-1;
         String ch=(line%i)/1;
         if ("0"<=ch) and (ch<="9")
         then FindNumber(this,i);
         else FindNumberEnd(this,x);
  ) // }}}
  String ch=(line%x)/1;
  if ("0"<=ch) and (ch<="9")
  then FindNumber(this,x);
  else this[2]<<^no;
) // }}}
|
#define $nearnumbers \
  2->1: $list(String)(2 of 1 pure,2); \
  2->1: Int; \
  2->1: Int; \
  $list(Int)
global $nearnumbers nearnumbers(1 pure,2);
local pure service NearNumbersService(nearnumbers (1 of 2) this) // {{{
( this[2]>>data>>x>>y;
  local FindNumbersL3($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
  ( data[1]<<^get<<y+1;
    data[1]>>
    {^err:
      data[1]>>err;
      nn[1]<<^takeover<<this;
     ^val:
      data[1]>>line;
      data[1]<<^end;
      Int len=line&^length;
      local FindNumbersL3R($list(Int)(1 of 1 pure,2) this, $list(Int)(2 of 1 pure,2) nn) // {{{
      ( if x<=len+2
        then fn=new findnumber(2 of 2);
             fn[1]<<line<<x+1;
             fn[1]>>
             {^no:
               nn[1]<<^takeover<<this;
              ^yes:
               fn[1]>>n;
               nn[1]<<^cons<<n<<^takeover<<this;
             }
        else nn[1]<<^takeover<<this;
      ) // }}}
      local FindNumbersL3L($list(Int)(1 of 1 pure,2) this, $list(Int)(2 of 1 pure,2) nn) // {{{
      ( if 1<=x
        then fn=new findnumber(2 of 2);
             fn[1]<<line<<x-1;
             fn[1]>>
             {^no:
               FindNumbersL3R(this,nn);
              ^yes:
               fn[1]>>n;
               nn[1]<<^cons<<n;
               FindNumbersL3R(this,data,nn);
             }
        else FindNumbersL3R(this,nn);
      ) // }}}
      fn=new findnumber(2 of 2);
      fn[1]<<line<<x;
      fn[1]>>
      {^yes:
        fn[1]>>n;
        nn[1]<<^cons<<n<<^takeover<<this;
       ^no:
        FindNumbersL3L(this,nn);
      }
    }
  ) // }}}
  local FindNumbersL2($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
  ( data[1]<<^get<<y;
    data[1]>>
    {^err:
      c=new console(2 of 2);
      c[1]<<^str<<"Error in FindNumbersL2: get caused err"<<^nl<<^end;
      data[1]>>err;
      nn[1]<<^takeover<<this;
     ^val:
      data[1]>>line;
      Int len=line&^length;
      local FindNumbersL2R($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
      ( if x<=len+2
        then fn=new findnumber(2 of 2);
             fn[1]<<line<<x+1;
             fn[1]>>
             {^no:
               FindNumbersL3(this,data,nn);
              ^yes:
               fn[1]>>n;
               nn[1]<<^cons<<n;
               FindNumbersL3(this,data,nn);
             }
        else FindNumbersL3(this,data,nn);
      ) // }}}
      local FindNumbersL2L($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
      ( if 1<=x
        then fn=new findnumber(2 of 2);
             fn[1]<<line<<x-1;
             fn[1]>>
             {^no:
               FindNumbersL2R(this,data,nn);
              ^yes:
               fn[1]>>n;
               nn[1]<<^cons<<n;
               FindNumbersL2R(this,data,nn);
             }
        else FindNumbersL2R(this,data,nn);
      ) // }}}
      FindNumbersL2L(this,data,nn);
    }
  ) // }}}
  nn=new list(2 of 2);
  nn<<Int;
  if 1<=y
  then data[1]<<^get<<y-1;
       data[1]>>
       {^err:
         c=new console(2 of 2);
         c[1]<<^str<<"Error in NearNumbersService: get caused err"<<^nl<<^end;
         data[1]>>err;
         nn[1]<<^takeover<<this;
        ^val:
         data[1]>>line;
         Int len=line&^length;
         local FindNumbersL1R($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
         ( if x<=len+2
           then fn=new findnumber(2 of 2);
                fn[1]<<line<<x+1;
                fn[1]>>
                {^no:
                  FindNumbersL2(this,data,nn);
                 ^yes:
                  fn[1]>>n;
                  nn[1]<<^cons<<n;
                  FindNumbersL2(this,data,nn);
                }
           else FindNumbersL2(this,data,nn);
         ) // }}}
         local FindNumbersL1L($list(Int)(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) data, $list(Int)(2 of 1 pure,2) nn) // {{{
         ( if 1<=x
           then fn=new findnumber(2 of 2);
                fn[1]<<line<<x-1;
                fn[1]>>
                {^no:
                  FindNumbersL1R(this,data,nn);
                 ^yes:
                  fn[1]>>n;
                  nn[1]<<^cons<<n;
                  FindNumbersL1R(this,data,nn);
                }
           else FindNumbersL1R(this,data,nn);
         ) // }}}
         fn=new findnumber(2 of 2);
         fn[1]<<line<<x;
         fn[1]>>
         {^yes:
           fn[1]>>n;
           nn[1]<<^cons<<n;
           FindNumbersL2(this,data,nn);
          ^no:
           FindNumbersL1L(this,data,nn);
         }
       }
  else FindNumbersL2(this,data,nn);
) // }}}
|
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) data, $list(String)(2 of 1 pure,2) ls) // {{{
  ( data[1]<<^Line;
    data[1]>>
    {^Some:
      data[1]>>line;
      Int len=line&^length;
      if 1<=len
      then ls[1]<<^snoc<<line;
           Read(data,ls);
      else Read(data,ls);
     ^None:
      // No more lines
      ls[1]<<^copy;
      ls[1]>>ls2;
      fs=new findstarslist(2 of 2);
      fs[1]<<ls2;
      fs[1]>>starxs>>starys;
      // Fix here
      local PrintPositions($list(Int)(2 of 1 pure,2) xs, $list(Int)(2 of 1 pure,2) ys, $list(String)(2 of 1 pure,2) ls) // {{{
      ( xs[1]<<^pop;
        xs[1]>>
        {^nil:
          ys[1]<<^end;
         ^cons:
          xs[1]>>x>>xtail;
          ys[1]<<^pop;
          ys[1]>>
          {^nil:
            xtail[1]<<^end;
           ^cons:
            ys[1]>>y>>ytail;
            c=new console(2 of 2);
            c[1]<<^str<<"Pos: ("<<^int<<x<<^str<<","<<^int<<y<<^str<<")"<<^nl<<^end;
            ls[1]<<^copy;
            ls[1]>>lscpy;
            nn=new nearnumbers(2 of 2);
            nn[1]<<lscpy<<x<<y;
            ns[1]<<^pop
            {^nil:
              PrintPositions(xtail,ytail,ls);
             ^val:
              nn[1]>>n1;
              nn[1]<<^pop;
              ls[1]>>
              {^nil:
                PrintPositions(xtail,ytail,ls);
               ^val:
                nn[1]>>n2;
                nn[1]<<^popM
                nn[1]>>
                {^nil:
                  // Exactly 2 near numbers
                  c=new console(2 of 2);
                  c[1]<<^str<<"Exactly two near numbers: "<<^int<<n1<<^str<<" and "<<^int<<n2<<^nl<<^end;
                 ^val:
                  nn[1]>>n3;
                  nn[1]<<^end;
                  PrintPositions(xtail,ytail,ls);
                }
              }
            }
          }
        }
      ) // }}} 
      PrintPositions(starxs,starys,ls);
      //ap=new addproducts(2 of 2);
      //ap[1]<<stars;
      //ap[1]>>sum;
      //c=new console(2 of 2);
      //c[1]<<^str<<"Sum of products is "<<^int<<sum<<^nl<<^end;
    }
  ) // }}}
  ls=new list(2 of 2);
  ls<<String;
  Read(f,ls);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
