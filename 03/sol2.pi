#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>

#define $findnumbersres \
  rec $res; \
  1->2 \
  {^number: \
    1->2: Int; \
    1->2: Int; \
    $res; \
   ^end: \
    $end; \
  }
#define $findnumbers \
  2->1: String; \
  $findnumbersres
global $findnumbers findnumbers(1 pure,2);
local pure service FindNumbersService(findnumbers (1 of 2) s) // {{{
( s[2]>>data;
  Int len=data&^length;
  local pure FindNumbers($findnumbersres(1 of 1 pure,2) s, Int start, Int pos) // {{{
  ( if len<=pos
    then if start+1<=pos
         then s[2]<<^number<<start<<pos-start<<^end;
         else s[2]<<^end;
    else Int ch=data&pos;
         if (ch<=48) and (57<=ch)
         then FindNumbers(s,pos+1,start);
         else if start+1<=pos
              then s[2]<<^number<<start<<pos-start;
                   FindNumbers(s,pos+1,pos+1);
              else FindNumbers(s,pos+1,pos+1);
  ) // }}}
  FindNumbers(s,0,0);
) // }}}
|
#define $findstarslistres \
  1->2: $list(Int)(2 of 1 pure,2); \
  1->2: $list(Int)(2 of 1 pure,2); \
  $end;
#define $findstarslist \
  2->1: $list(String)(2 of 1 pure,2); \
  $findstarslistres
global $findstarslist findstarslist(1 pure,2);
local pure service FindStarsList(findstarslist (1 of 2) s) // {{{
( local pure FindStars($findstarslistres(1 of 1 pure,2) this, // {{{
                       $list(String)(2 of 1 pure,2) data,
                       $list(Int)(2 of 1 pure,2) xs,
                       $list(Int)(2 of 1 pure,2) ys,
                       Int y)
  ( data[1]<<^pop;
    data[1]>>
    {^cons:
      data[1]>>line;
      data[1]>>dtail;
      Int len=line&^length;
      local pure FindStarsLine($findstarslistres(1 of 1 pure,2) this, // {{{
                               $list(String)(2 of 1 pure,2) data,
                               $list(Int)(2 of 1 pure,2) xs,
                               $list(Int)(2 of 1 pure,2) ys,
                               Int x)
      ( if len<=x
        then FindStars(this,data,xs,ys,y+1);
        else String cur=(line%x)/1;
             if cur="*"
             then xs[1]<<^snoc<<x;
                  ys[1]<<^snoc<<y;
                  FindStarsLine(this,data,xs,ys,x+1);
             else FindStarsLine(this,data,xs,ys,x+1);
      ) // }}}
      FindStarsLine(this,dtail,xs,ys,0);
     ^nil:
      this[2]<<xs<<ys;
    }
  ) // }}}
  s[2]>>data;
  xs=new list(2 of 2);
  xs<<Int;
  ys=new list(2 of 2);
  ys<<Int;
  FindStars(s,data,xs,ys,0);
) // }}}
|
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) data, $list(String)(2 of 1 pure,2) ls) // {{{
  ( data[1]<<^Line;
    data[1]>>
    {^Some:
      data[1]>>line;
      Int len=line&^length;
      if 1<=len
      then ls[1]<<^snoc<<line;
           Read(data,ls);
      else Read(data,ls);
     ^None:
      // No more lines
      ls[1]<<^copy;
      ls[1]>>ls2;
      ls[1]<<^end;
      fs=new findstarslist(2 of 2);
      fs[1]<<ls2;
      fs[1]>>starxs>>starys;
      //sf=new filterstars(2 of 2);
      //sf[1]<<starxs<<starys;
      //sf[1]>>gearxs>>gearys;
      // Fix here
      local PrintPositions($list(Int)(2 of 1 pure,2) xs, $list(Int)(2 of 1 pure,2) ys) // {{{
      ( xs[1]<<^pop;
        xs[1]>>
        {^nil:
          ys[1]<<^end;
         ^cons:
          xs[1]>>x>>xtail;
          ys[1]<<^pop;
          ys[1]>>
          {^nil:
            xtail[1]<<^end;
           ^cons:
            ys[1]>>y>>ytail;
            c=new console(2 of 2);
            c[1]<<^str<<"Pos: ("<<^int<<x<<^str<<","<<^int<<y<<^str<<")"<<^nl<<^end;
            PrintPositions(xtail,ytail);
          }
        }
      ) // }}} 
      PrintPositions(starxs,starys);
      //ap=new addproducts(2 of 2);
      //ap[1]<<stars;
      //ap[1]>>sum;
      //c=new console(2 of 2);
      //c[1]<<^str<<"Sum of products is "<<^int<<sum<<^nl<<^end;
    }
  ) // }}}
  ls=new list(2 of 2);
  ls<<String;
  Read(f,ls);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
