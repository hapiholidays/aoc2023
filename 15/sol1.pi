#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#define $printstrings \
  2->1: $list(String)(2 of 1 pure,2); \
  $end;
global $printstrings printstrings(1,2);
local service PrintStringsService(printstrings (1 of 2) this) // {{{
( local PrintStrings($console(2 of 1,2) c, $list(String)(2 of 1 pure,2) strings, Bool first)
  ( strings[1]<<^pop;
    strings[1]>>
    {^nil:
      c[1]<<^str<<if first then "[]" else "]"<<^nl<<^end;
     ^cons:
      strings[1]>>s>>tail;
      c[1]<<^str<<if first then "[ " else ", "<<^str<<s<<^nl;
      PrintStrings(c,tail,false);
    }
  )
  this[2]>>strings;
  c=new console(2 of 2);
  PrintStrings(c,strings,true);
) // }}}
|
#define $strfind \
  2->1: String; \
  2->1: String; \
  1->2: Int; \
  $end;
global $strfind strfind(1 pure,2);
local pure service StrFindService(strfind (1 of 2) this) // {{{
( this[2]>>data;
  this[2]>>pat;
  Int patlen=pat&^length;
  if patlen<=0
  then this[2]<<0;
  else Int datalen=data&^length;
       local pure StrFind(1->2:Int;$end;(1 of 1 pure,2) this, Int pos) // {{{
       ( if datalen+1<=pos+patlen
         then this[2]<<0-1;
         else if (data%pos)/patlen=pat
              then this[2]<<pos;
              else StrFind(this,pos+1);
       ) // }}}
       StrFind(this,0);
) // }}}
|
#define $parsecsvres \
  1->2: $list(String)(2 of 1 pure,2); \
  $end;
#define $parsecsv \
  2->1: String; \
  $parsecsvres
global $parsecsv parsecsv(1 pure,2);
local pure service ParseCsvService(parsecsv (1 of 2) this) // {{{
( this[2]>>csvstr;
  Int len=csvstr&^length;
  local pure ParseCsv($parsecsvres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) res, Int pos) // {{{
  ( fs=new strfind(2 of 2);
    fs[1]<<csvstr%pos<<",";
    fs[1]>>pos2;
    if pos2+1<=0
    then String elt=csvstr%pos;
         res[1]<<^snoc<<elt;
         this[2]<<res;
    else if pos2<=0
         then ParseCsv(this,res,pos+1);
         else String elt=(csvstr%pos)/pos2;
              res[1]<<^snoc<<elt;
              ParseCsv(this,res,pos+pos2+1);
  ) // }}}
  res=new list(2 of 2);
  res<<String;
  ParseCsv(this,res,0);
) // }}}
|
#define $hash \
  2->1:String; \
  1->2:Int; \
  $end;
global $hash hash(1 pure,2);
local pure service HashService(hash (1 of 2) this) // {{{
( this[2]>>str;
  Int strlen=str&^length;
  local pure Hash(1->2:Int;$end;(1 of 1 pure,2) this, Int pos, Int sum) // {{{
  ( if strlen<=pos
    then 
         //HOST("cout << \"Final hash value is: \" << ((libpi::Int*)",sum,".get())->ToString() << endl;") pure;
         this[2]<<sum;
    else String ch=(str%pos)/1;
         Int chord=0;
         HOST("",chord,".reset(new libpi::Int((long)((libpi::String*)",ch,".get())->GetValue()[0]));") pure;
         Int sum2=(sum+chord)*17;
         Int sum3=sum2-((sum2/256)*256);
         //HOST("cout << \"Hash is currently: \" << ((libpi::Int*)",sum3,".get())->ToString() << endl;") pure;
         Hash(this,pos+1,sum3);
  ) // }}}
  Hash(this,0,0);
) // }}}
|
#define $sumhashes \
  2->1:$list(String)(2 of 1 pure,2); \
  1->2:Int; \
  $end;
global $sumhashes sumhashes(1 pure,2);
local pure service SumHashesService(sumhashes (1 of 2) this) // {{{
( this[2]>>elts;
  local pure SumHashes(1->2:Int;$end;(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) elts, Int sum) // {{{
  ( elts[1]<<^pop;
    elts[1]>>
    {^nil:
      this[2]<<sum;
     ^cons:
      elts[1]>>head>>tail;
      h=new hash(2 of 2);
      h[1]<<head;
      h[1]>>hashval;
      SumHashes(this,tail,sum+hashval);
    }
  ) // }}}
  SumHashes(this,elts,0);
) // }}}
|
f=new file(2 of 2);
f[1]<<^Read<<"input";
f[1]>>
{^OK:
  local Read($infile(2 of 1,2) f) // {{{
  ( f[1]<<^Line;
    f[1]>>
    {^Some:
      f[1]>>line;
      // Parse CSV row to string list
      pcsv=new parsecsv(2 of 2);
      pcsv[1]<<line;
      pcsv[1]>>elts;
      // Print string list (for debug)
      elts[1]<<^copy;
      elts[1]>>cpy;
      ps=new printstrings(2 of 2);
      ps[1]<<cpy;
      // Calculate sum of hashes
      sh=new sumhashes(2 of 2);
      sh[1]<<elts;
      sh[1]>>sum;
      // Print sum
      c=new console(2 of 2);
      c[1]<<^str<<"Sum of hashes is "<<^int<<sum<<^nl<<^end;
      Read(f);
     ^None:
    }
  ) // }}}
  Read(f);
 ^Error:
  f[1]>>err;
  c=new console(2 of 2);
  c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
}
